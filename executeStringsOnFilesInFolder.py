import subprocess
import json
import os
import pandas


WORKING_DIRECTORY= os.path.dirname(__file__)
GOOD_FILES_DIRECTORY= WORKING_DIRECTORY + "/Samples/" + "goodFiles"
BAD_FILES_DIRECTORY= WORKING_DIRECTORY + "/Samples/" + "badFiles"


GOOD_SAMPLE_DATA_JSON_OUTPUT_FILE= WORKING_DIRECTORY + "/Samples/" + "goodFiles.json"
BAD_SAMPLE_DATA_JSON_OUTPUT_FILE= WORKING_DIRECTORY + "/Samples/" + "badFiles.json"
FULL_SAMPLE_DATA_JSON_OUTPUT_FILE= WORKING_DIRECTORY + "/Samples/" + "StringsOutputFromSampleDate.json"

# Terminate the program if file(s) exist
DELETE_EXISTING_OUTPUT_FILES = True

# DataStructure Output
FLAG_FOR_MALICIOUS = True
FLAG_FOR_NOT_MALICIOUS = False


# ID Sample Counter / changes in Runtime
start_counter_for_sample_ids=0




def checkEnvironment():
    if os.path.exists(WORKING_DIRECTORY) != True:
        raise Exception("Working Directory does not exist: " + WORKING_DIRECTORY)

    if os.path.exists(GOOD_FILES_DIRECTORY) != True:
        raise Exception("Good Files Directory does not exist: " + GOOD_FILES_DIRECTORY)

    if os.path.exists(BAD_FILES_DIRECTORY) != True:
        raise Exception("Bad Files Directory does not exist: " + BAD_FILES_DIRECTORY)

    if os.path.exists(GOOD_SAMPLE_DATA_JSON_OUTPUT_FILE) & DELETE_EXISTING_OUTPUT_FILES:
        deleteFileIfExists(GOOD_SAMPLE_DATA_JSON_OUTPUT_FILE)

    if os.path.exists(BAD_SAMPLE_DATA_JSON_OUTPUT_FILE) & DELETE_EXISTING_OUTPUT_FILES:
        deleteFileIfExists(BAD_SAMPLE_DATA_JSON_OUTPUT_FILE)

    if os.path.exists(GOOD_SAMPLE_DATA_JSON_OUTPUT_FILE) & DELETE_EXISTING_OUTPUT_FILES:
        deleteFileIfExists(GOOD_SAMPLE_DATA_JSON_OUTPUT_FILE)


def deleteFileIfExists(fileToDelete):
    try:
        os.remove(fileToDelete)
    except:
        raise Exception("File cannot be removed: " + fileToDelete)


def getFileListFromDirectory(directoryPath):
    fileList = []
    for filename in os.listdir(directoryPath):
        fileList.append(directoryPath + "/" + filename)
    return fileList

def getStringOutputOfFile(filePath):
    commandLineToExecute = "strings " + filePath
    output = subprocess.check_output(commandLineToExecute, shell=True)
    return output

def getOutputDataStructureFromStringOutput(counter, filePathList, flag):
    output= []
    for filePath in filePathList:
        column=[]
        column.append(counter)
        column.append(filePath)
        column.append(getStringOutputOfFile(filePath))
        column.append(flag)
        output.append(column)
        counter=counter+1

    dataframe = pandas.DataFrame(output,columns=["modelId", "filePaht", "stringsOutput", "isMalware"])
    return counter,dataframe




checkEnvironment()
#create good Files
goodFilesFileList=getFileListFromDirectory(GOOD_FILES_DIRECTORY)
start_counter_for_sample_ids, goodFilesDataStructure=getOutputDataStructureFromStringOutput(start_counter_for_sample_ids, goodFilesFileList, FLAG_FOR_NOT_MALICIOUS)
goodFilesDataStructure.to_json(GOOD_SAMPLE_DATA_JSON_OUTPUT_FILE, orient='records')

badFilesFileList=getFileListFromDirectory(BAD_FILES_DIRECTORY)
start_counter_for_sample_ids, badFilesDataStructure=getOutputDataStructureFromStringOutput(start_counter_for_sample_ids, badFilesFileList,FLAG_FOR_MALICIOUS)
badFilesDataStructure.to_json(BAD_SAMPLE_DATA_JSON_OUTPUT_FILE, orient='records')

fullDataStructure = goodFilesDataStructure.append(badFilesDataStructure)
fullDataStructure.to_json(FULL_SAMPLE_DATA_JSON_OUTPUT_FILE, orient='records')


#print(goodFilesDataStructure[0].dataModelId)
#print(goodFilesDataStructure[0].nameOfAnalizedBinary)
#print(goodFilesDataStructure[0].stringsOutput)
#print(start_counter_for_sample_ids)
