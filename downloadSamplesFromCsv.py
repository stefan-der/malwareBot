# required for easily create REST Request
import requests
# Required for Relative Path Includes
import os

import pandas
import urllib.request
import shutil



CUCKOO_REST_URL = "http://localhost:1337/tasks/create/file"
URL_COLUMN_NAME="URL"

CurrentFolder = os.path.dirname(__file__)
SampleFolder = CurrentFolder + "/malwareDownloadDir"
csvFileName = "MalwareBotvxVault.csv"
csvPath = CurrentFolder + "/" + csvFileName

# Checks Environment
def checkEnvironment():
    if os.path.exists(CurrentFolder) != True:
        raise Exception("CurrentFolder does not exist Folder:" + CurrentFolder)

    if os.path.exists(SampleFolder) != True:
        raise Exception("Sample Folder does not Exist Folder:" + SampleFolder)

    if os.path.exists(csvPath) != True:
        raise Exception("CSV Path does not Exist: " + csvPath)

    # Load Data from CSV
def getCSVEntriesAsDataFrame():
        return pandas.read_csv(csvPath)

def getOnlineEntriesFromDataFrame(dataframe):
        dataFrameOnline = dataframe[dataframe["STATUS"] == "online"]
        dataFrameOnline = dataFrameOnline[pandas.notnull(dataFrameOnline[URL_COLUMN_NAME])]
        dataWithExecutables = dataFrameOnline[dataFrameOnline[URL_COLUMN_NAME].str.contains(".exe")]
        return dataWithExecutables

def downloadFilesFromDataFrame(dataframe):
        for index, row in dataframe.iterrows():
            print(row[URL_COLUMN_NAME])
            try:
                currentUrl="http://"+row[URL_COLUMN_NAME]
                downloadFileToSampleDirectory(currentUrl)
            except:
                print("Download Error")

def downloadFileToSampleDirectory(url):
        targetFileName=SampleFolder + "/" + url.split('/')[-1]

        try:
            file_name= urllib.request.urlretrieve(url, targetFileName)
        except:
            raise Exception("Download Error: " + url + "Error Message:")

def getDownloadedFilesFromSampleDirectory():
        allDownloadedFiles=[]
        for filename in os.listdir(SampleFolder):
            if filename.endswith(".exe"):
                allDownloadedFiles.append(SampleFolder + "/" + filename)
                continue
            else:
                continue
        return allDownloadedFiles

def postFileListToCuckooAPI(fileList):
        #test
        for filename in fileList:
            try:
                postFileToCuckooApi(filename)
            except:
                print("Error Posting Filename to API")
                return

def postFileToCuckooApi(fileName):
        with open(fileName, "rb") as sample:
            files = {"file": ("temp_file_name", sample)}
            r = requests.post(CUCKOO_REST_URL, files=files)

            if r.status_code != 200 :
                raise Exception("HTTP Request error, Error Number: " + r.status_code)



# Execution Structure
#checkEnvironment()
#dataframe = getCSVEntriesAsDataFrame()
#filteredDataFrame = getOnlineEntriesFromDataFrame(dataframe)
#downloadFilesFromDataFrame(filteredDataFrame)
fileList = getDownloadedFilesFromSampleDirectory()
postFileListToCuckooAPI(fileList)