# required for easily create REST Request
import requests
# Required for Relative Path Includes
import os

import pandas
import urllib.request
import shutil


class MalwareDownloader:
    CUCKOO_REST_URL = "http://localhost:1337/tasks/create/file"
    URL_COLUMN_NAME="URL"

    CurrentFolder = os.path.dirname(__file__)
    SampleFolder = CurrentFolder + "/malwareDownloadDir"
    csvFileName = "MalwareBotvxVault.csv"
    csvPath = CurrentFolder + "/" + csvFileName

    # Checks Environment
    def checkEnvironment(self):
        if os.path.exists(self.CurrentFolder) != True:
            raise Exception("CurrentFolder does not exist Folder:" + self.CurrentFolder)

        if os.path.exists(self.SampleFolder) != True:
            raise Exception("Sample Folder does not Exist Folder:" + self.SampleFolder)

        if os.path.exists(self.csvPath) != True:
            raise Exception("CSV Path does not Exist: " + self.csvPath)

    # Load Data from CSV
    def getCSVEntriesAsDataFrame(self):
        return pandas.read_csv(self.csvPath)

    def getOnlineEntriesFromDataFrame(self, dataframe):
        dataFrameOnline = dataframe[dataframe["STATUS"] == "online"]
        dataFrameOnline = dataFrameOnline[pandas.notnull(dataFrameOnline[self.URL_COLUMN_NAME])]
        dataWithExecutables = dataFrameOnline[dataFrameOnline[self.URL_COLUMN_NAME].str.contains(".exe")]
        return dataWithExecutables

    def downloadFilesFromDataFrame(self, dataframe):
        for index, row in dataframe.iterrows():
            print(row[self.URL_COLUMN_NAME])
            try:
                currentUrl="http://"+row[self.URL_COLUMN_NAME]
                self.downloadFileToSampleDirectory(currentUrl)
            except:
                print("Download Error")

            if index==30:
                return


    def downloadFileToSampleDirectory(self, url):
        targetFileName=self.SampleFolder + "/" + url.split('/')[-1]

        try:
            file_name= urllib.request.urlretrieve(url, targetFileName)
        except:
            raise Exception("Download Error: " + url + "Error Message:")


    def getDownloadedFilesFromSampleDirectory(self):
        allDownloadedFiles=[]
        for filename in os.listdir(self.SampleFolder):
            if filename.endswith(".exe"):
                allDownloadedFiles.append(self.SampleFolder + "/" + filename)
                continue
            else:
                continue
        return allDownloadedFiles

    def postFileListToCuckooAPI(self, fileList):
        #test
        for filename in fileList:
            try:
                self.postFileToCuckooApi(filename)
            except:
                print("Error Posting Filename to API")
                return


    def postFileToCuckooApi(self, fileName):
        with open(fileName, "rb") as sample:
            files = {"file": ("temp_file_name", sample)}
            r = requests.post(self.CUCKOO_REST_URL, files=files)

            if r.status_code != 200 :
                raise Exception("HTTP Request error, Error Number: " + r.status_code)



    # Execution Structure
    def __init__(self):
        self.checkEnvironment()
        #dataframe = self.getCSVEntriesAsDataFrame()
        #filteredDataFrame = self.getOnlineEntriesFromDataFrame(dataframe)
        #self.downloadFilesFromDataFrame(filteredDataFrame)
        fileList = self.getDownloadedFilesFromSampleDirectory()
        self.postFileListToCuckooAPI(fileList)



malwareDownloaderClass = MalwareDownloader()